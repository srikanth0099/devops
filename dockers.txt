DOKER:
----
docker run hello-world
docker run busybox echo hi there

docker create hello-world
docker start -a conatiner-id from above cmd
docker logs container-id from above cmd

docker start c-id  10sec gap stop
docker kill c-id  quick stop
docker exec -it c-id sh -->running conatiner
docker run-it c-id sh -->to start conatiner

Dockerfile
FROM base-image
RUN update dependicies
CMD ["xxxx"]

docker build . --> will create image

docker build -t sriki05/c-name:latest .  ---> tag an image


docker run -it alpine sh
apk app --update redis
docker commit -c 'CMD["redis-server"]' c-id


docker nodejs
------
FROM node:alpine
WORKDIR /usr/app
COPY ./ ./
RUN npm install
CMD ["npm","start"]

docker build -t sriki05/simpleweb:latest .
docker run -p 8080(local):808(con) simpleweb

Inorder to reduce the build time what we can do is
FROM node:alpine
WORKDIR /usr/app
COPY ./package.son ./
RUN npm install
COPY . .
CMD ["npm","start"] 


DOCKER COMPOSE: if it is single conatiner no need of compose but it is multi container like app, db then use compose:
syntax:
version : '3'
services:
  redis-server:
    image: 'redis'
  node-app:
    restart: always/on-failure/no/unless-stopped(restart policies)
    build: .
    ports:
      -"8082:8081"
docker ps
cmds: docker-compose up -d
docker-compose down
docker compose-up --build
---------------

for node in dev create Dockerfile.dev while running us docker build -f Dockerfile.dev .
DOCKER VOLUMES:
docker run -p 8080:8081 -v /app/node_modules -v $(pwd):/app c-id
if we made any changes in web app it automatically reflects in docker 
In dockerfile write all the cmds required.
Docker-compose.yml
version : '3'
services:
  node-app:
    build: 
     context: .
     dockerfile: Dockerfile.dev (if we write some ext to dockerfile we can use this one)
    ports:
      -"8082:8081"
    volumes:
      - /app/node_modules
      - .:/app
  tests:  (for testing purpose)
     build: 
      context: .
      dockerfile: Dockerfile.dev 
     volumes:
      - /app/node_modules
      - .:/app
      command: ['npm','start','test']
docker-compose up

Multi build set-up:
FROM node:alpine as builder
WORKDIR /usr/app
COPY ./package.son .
RUN npm install
COPY . .
RUN npm run build

FROM nginx
EXPOSE 80
COPY --from=builder /app/build /usr/share/nginx/html

-------------------

GIT:
git init
git add .
git commit -m "first commit"
git remote add origin github link
git push origin master
git checkout -b feature
git add .
git commit -m ""
git push origin feature










